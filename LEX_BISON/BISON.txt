%{
#include "common.h"
#include "define_type.h"
#include "fabricnode.h"
#include "virtualbasenode.h"
#include <iostream>

int yylex();
void yyerror(const char *s);

int lineno;
VirtualBaseNode* root;

%}

%require "3.8.2"
%defines "BasicParser.h"
%output "BasicParser.cpp"
%define parse.error verbose

%union 
{
    VirtualBaseNode* node;
    char* num;
    char* var;
    char* str;

}

%initial-action
{
    lineno = 1;
}

%token <num> INTEGER
%token <str> STR 
%token <var> VARIABLE
%token PRINT DIM REM IF GOSUB INPUT LET END THEN  LIST CLEAR RUN RETURN 
%token  LT LE GT GE EQ NE EOL
%type<node> program block line statement expression term factor number digit  var relop var_list  expr_list string




%%
program: block	                                            {root = $1; 
                                                            return 0; }  
	;

block: block line                                           {$$ = FabricNode::CreateNode(100, TypeNode::BLOCK_LINE, $1, $2);}  
	 | line                                                 {$$ = FabricNode::CreateNode(100, TypeNode::LINE, $1, nullptr);}  
	;

line: number statement EOL                                  {$$ = FabricNode::CreateNode(100, TypeNode::NUM_STATM, $1, $2); lineno++;}
	| statement EOL                                         {$$ = FabricNode::CreateNode(100, TypeNode::STATM, $1, nullptr); lineno++;}  
	;

statement:
    PRINT expr_list                                         {$$ = FabricNode::CreateNode(100, TypeNode::PRINT, $2, nullptr);}
    | REM string                                            {$$ = FabricNode::CreateNode(100, TypeNode::REM, $2, nullptr);}   
    | DIM var_list                                          {$$ = FabricNode::CreateNode(100, TypeNode::DIM, $2, nullptr);}                 
    | IF expression relop expression THEN statement         {$$ = FabricNode::CreateNode(100, TypeNode::IF_THEN, $2, $3, $4, $6);}
    | GOSUB expression                                      {$$ = FabricNode::CreateNode(100, TypeNode::GOSUB, $2, nullptr);}               
    | INPUT var_list                                        {$$ = FabricNode::CreateNode(100, TypeNode::INPUT, $2, nullptr);}                 
    | LET var EQ expression                                 {$$ = FabricNode::CreateNode(100, TypeNode::LET, $2, $4);}
    | RETURN                                                {$$ = FabricNode::CreateNode(100, TypeNode::RETRN, nullptr, nullptr);}                          
    ;

expr_list:
    expr_list','expression                                  {$$ = FabricNode::CreateNode(100, TypeNode::EXPR_LST, $1, $3);}
    | expression 	                                        {$$ = FabricNode::CreateNode(100, TypeNode::EXPRESSION, $1, nullptr);}
    | string		                                        {$$ = FabricNode::CreateNode(100, TypeNode::STR, $1, nullptr);}
    | expr_list','string                                    {$$ = FabricNode::CreateNode(100, TypeNode::EXPR_LST, $1, $3);}
    ;

var_list:
    var_list','var                                          {$$ = FabricNode::CreateNode(100, TypeNode::VAR_LST, $1, $3);}
    | var                                                   {$$ = FabricNode::CreateNode(100, TypeNode::VAR, $1, nullptr);}
    ;

expression:
    expression'+'term                                       {$$ = FabricNode::CreateNode(100, TypeNode::EX_ADD_TERM, $1, $3);}                  
    | expression'-'term                                     {$$ = FabricNode::CreateNode(100, TypeNode::EX_SUB_TERM, $1, $3);}
    | term                                                  {$$ = FabricNode::CreateNode(100, TypeNode::TERM, $1, nullptr);}
    ;

term:
    term'*'factor                                           {$$ = FabricNode::CreateNode(100, TypeNode::TERM_MALT_FACT, $1, $3);}
    | term'/'factor                                         {$$ = FabricNode::CreateNode(100, TypeNode::TERM_DIVIDE_FACT, $1, $3);}
    | factor                                                {$$ = FabricNode::CreateNode(100, TypeNode::FACTOR, $1, nullptr);}
    ;

factor:
    var                                                     {$$ = FabricNode::CreateNode(100, TypeNode::VAR, $1, nullptr);}
    | number                                                {$$ = FabricNode::CreateNode(100, TypeNode::NUMBER, $1, nullptr);}
    | '('expression')'	                                    {$$ = FabricNode::CreateNode(100, TypeNode::EXPRESSION, $2, nullptr);}
    ;

number:
    number digit                                            {$$ = FabricNode::CreateNode(100, TypeNode::NUMBER_DG, $1, $2);}
    | digit                                                 {$$ = FabricNode::CreateNode(100, TypeNode::DIGIT, $1, nullptr);}
    ;

digit:
    INTEGER                                                 {$$ = FabricNode::CreateNode(100, TypeNode::INTEGER, $1);}
    ;

var:
    VARIABLE                                                {$$ = FabricNode::CreateNode(100, TypeNode::VARIABLE, $1);}
    ;
string:
    STR	                                                    {$$ = FabricNode::CreateNode(100, TypeNode::STRING, $1);}
     ;

relop:
    LT	                                                    {$$ = FabricNode::CreateNode(100, TypeNode::LT);}
    | LE	                                                {$$ = FabricNode::CreateNode(100, TypeNode::LE);}
    | GT	                                                {$$ = FabricNode::CreateNode(100, TypeNode::GT);}
    | GE                                                    {$$ = FabricNode::CreateNode(100, TypeNode::GE);}
    | EQ                                                    {$$ = FabricNode::CreateNode(100, TypeNode::EQ);}
    | NE                                                    {$$ = FabricNode::CreateNode(100, TypeNode::NE);}
    ;

%%

void yyerror(const char *s) {
    yyclearin;
    throw ParserException{lineno, QString(s)};
}
